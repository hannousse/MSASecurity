Prefix(:=<http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#>)
Prefix(owl:=<http://www.w3.org/2002/07/owl#>)
Prefix(rdf:=<http://www.w3.org/1999/02/22-rdf-syntax-ns#>)
Prefix(xml:=<http://www.w3.org/XML/1998/namespace>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)


Ontology(<http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA>

Declaration(Class(:Access_Control))
Declaration(Class(:Adhoc_Metrics))
Declaration(Class(:ArchitecturalLayer))
Declaration(Class(:Auditing))
Declaration(Class(:Authentication))
Declaration(Class(:Authorization))
Declaration(Class(:Case_Study))
Declaration(Class(:Complexity_Measuring))
Declaration(Class(:Data_Attacks))
Declaration(Class(:Formal_Verification))
Declaration(Class(:Infrastructure_Attacks))
Declaration(Class(:Manual_Testing))
Declaration(Class(:Methodology))
Declaration(Class(:Mitigation))
Declaration(Class(:Performance_analysis))
Declaration(Class(:Prevention))
Declaration(Class(:Proof_Of_Concept))
Declaration(Class(:Qualitative_analysis))
Declaration(Class(:Quantitative_analysis))
Declaration(Class(:SecurityInMSA))
Declaration(Class(:SecurityMechanism))
Declaration(Class(:SecurityThreat))
Declaration(Class(:Simulation))
Declaration(Class(:Software_Attacks))
Declaration(Class(:SolutionType))
Declaration(Class(:TargetPlatform))
Declaration(Class(:ThreatSource))
Declaration(Class(:Tool_Based_Testing))
Declaration(Class(:User_Based_Attacks))
Declaration(Class(<http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique>))
Declaration(ObjectProperty(:applicableAt))
Declaration(ObjectProperty(:applicableTo))
Declaration(ObjectProperty(:hasSource))
Declaration(ObjectProperty(:hasType))
Declaration(ObjectProperty(:treatedBy))
Declaration(ObjectProperty(:treats))
Declaration(ObjectProperty(:validatedThrough))
Declaration(DataProperty(:abbriviation))
Declaration(DataProperty(:also_known_as))
Declaration(DataProperty(:description))
Declaration(NamedIndividual(:Ability_to_logout))
Declaration(NamedIndividual(:Adaptable_Intrusion_Response_System))
Declaration(NamedIndividual(:Algorithm))
Declaration(NamedIndividual(:Application_Programming_Interface))
Declaration(NamedIndividual(:Attack_surface_analysis))
Declaration(NamedIndividual(:Attribute-Based_Access_Control))
Declaration(NamedIndividual(:Blockchain_technology))
Declaration(NamedIndividual(:Brute_Force_Attack))
Declaration(NamedIndividual(:CPU_usage))
Declaration(NamedIndividual(:Cause_Single_point_of_failure))
Declaration(NamedIndividual(:Centralized_Access_Control_Manager))
Declaration(NamedIndividual(:Certificates))
Declaration(NamedIndividual(:Cloud))
Declaration(NamedIndividual(:Code_Reuse_Attack))
Declaration(NamedIndividual(:Cold_Boot_Attack))
Declaration(NamedIndividual(:Common_Vulnerabilities_and_Exposures))
Declaration(NamedIndividual(:Common_Vulnerability_Scoring_System))
Declaration(NamedIndividual(:Communication))
Declaration(NamedIndividual(:Compiler_Extensions))
Declaration(NamedIndividual(:Complexity_of_cracking))
Declaration(NamedIndividual(:Complexity_of_implementation))
Declaration(NamedIndividual(:Composition))
Declaration(NamedIndividual(:Compromise_Containers))
Declaration(NamedIndividual(:Compromise_Hypervisor))
Declaration(NamedIndividual(:Compromise_Management_Interface))
Declaration(NamedIndividual(:Compromise_Network_Nodes))
Declaration(NamedIndividual(:Compromise_discovery_service))
Declaration(NamedIndividual(:Compromise_microservices))
Declaration(NamedIndividual(:Compromize_Operating_Systems))
Declaration(NamedIndividual(:Compromize_Virtual_Machines))
Declaration(NamedIndividual(:Container_based))
Declaration(NamedIndividual(:Continuous_Monitoring))
Declaration(NamedIndividual(:Cross-Site_Request_Forgery))
Declaration(NamedIndividual(:Dataset_validation))
Declaration(NamedIndividual(:Decentralized))
Declaration(NamedIndividual(:Deception_by_live_cloning_and_sandboxing))
Declaration(NamedIndividual(:Denial_of_Service))
Declaration(NamedIndividual(:Deployment))
Declaration(NamedIndividual(:Disrupt_Sensitive_Operation))
Declaration(NamedIndividual(:Distribute_sessions))
Declaration(NamedIndividual(:Diversification))
Declaration(NamedIndividual(:Diversification_Index))
Declaration(NamedIndividual(:Downgrade_Attack))
Declaration(NamedIndividual(:Dynamic_code_analysis))
Declaration(NamedIndividual(:Easy_scalable))
Declaration(NamedIndividual(:Eavesdropping))
Declaration(NamedIndividual(:Emulate_Attacks))
Declaration(NamedIndividual(:Encryption))
Declaration(NamedIndividual(:External))
Declaration(NamedIndividual(:Firewalls))
Declaration(NamedIndividual(:Framework))
Declaration(NamedIndividual(:Gatling_Open_Source_Load_Testing))
Declaration(NamedIndividual(:General_Protection_Measures))
Declaration(NamedIndividual(:HIP_exchange_protocol_through_SDN_Controller))
Declaration(NamedIndividual(:HTTP_signatures))
Declaration(NamedIndividual(:Hard-Infrastructure))
Declaration(NamedIndividual(:Hardware_Security_Module))
Declaration(NamedIndividual(:Hardware_backdoors))
Declaration(NamedIndividual(:Heartblead))
Declaration(NamedIndividual(:IP_Suffling))
Declaration(NamedIndividual(:Independent))
Declaration(NamedIndividual(:Injection))
Declaration(NamedIndividual(:IntelliJ_IDEA_Unit-Testing))
Declaration(NamedIndividual(:Internal))
Declaration(NamedIndividual(:Intrusion_Detection))
Declaration(NamedIndividual(:IoT))
Declaration(NamedIndividual(:Isolation_of_sucpecious_microservices))
Declaration(NamedIndividual(:J-PAKE_protocol))
Declaration(NamedIndividual(:JSON_Web_Token))
Declaration(NamedIndividual(:Jadex))
Declaration(NamedIndividual(:Kubernetes))
Declaration(NamedIndividual(:Latency))
Declaration(NamedIndividual(:Least-privilege))
Declaration(NamedIndividual(:Live_migration))
Declaration(NamedIndividual(:Machine_Learning))
Declaration(NamedIndividual(:Malicious_Images))
Declaration(NamedIndividual(:Malicious_Insider))
Declaration(NamedIndividual(:Malicious_Provider))
Declaration(NamedIndividual(:Man_in_The_Middle))
Declaration(NamedIndividual(:Microservice))
Declaration(NamedIndividual(:Misconfiguration))
Declaration(NamedIndividual(:No-shared_memory_access))
Declaration(NamedIndividual(:No_inherent_bottelneck))
Declaration(NamedIndividual(:OAuth2))
Declaration(NamedIndividual(:OWASP_Risk_Rating_Methodology))
Declaration(NamedIndividual(:OWASP_ZAP))
Declaration(NamedIndividual(:OpenAPI_Documents))
Declaration(NamedIndividual(:Open_ID))
Declaration(NamedIndividual(:Osmotic))
Declaration(NamedIndividual(:Padding_Oracle_On_Downgraded_Legacy_Encryption_Attack))
Declaration(NamedIndividual(:Port_Scan_Attack))
Declaration(NamedIndividual(:Proper_design))
Declaration(NamedIndividual(:Protocol))
Declaration(NamedIndividual(:Quality_of_Deception))
Declaration(NamedIndividual(:Receiver_Operating_Characteristic_Curve))
Declaration(NamedIndividual(:Replay_Attack))
Declaration(NamedIndividual(:Restart_micorservices))
Declaration(NamedIndividual(:Role-Based_Access_Control))
Declaration(NamedIndividual(:Rollback_microservices))
Declaration(NamedIndividual(:SGX_Technology_with_enclaves))
Declaration(NamedIndividual(:Sandbox_escape))
Declaration(NamedIndividual(:Scan_container_images))
Declaration(NamedIndividual(:Secure_language))
Declaration(NamedIndividual(:Security_risk_comparison))
Declaration(NamedIndividual(:Sensitive_Data_Exposure))
Declaration(NamedIndividual(:Session_Hijacking))
Declaration(NamedIndividual(:Session_Sustainability))
Declaration(NamedIndividual(:Short-lived_Tokens))
Declaration(NamedIndividual(:Shutdown_Suspecious_Microservices))
Declaration(NamedIndividual(:Simple_to_implement))
Declaration(NamedIndividual(:Single_Sign-On))
Declaration(NamedIndividual(:Smart-Contracts))
Declaration(NamedIndividual(:Sniffing_Attack))
Declaration(NamedIndividual(:Soft-Infrastructure))
Declaration(NamedIndividual(:Space_Complexity))
Declaration(NamedIndividual(:Spoofing_Attack))
Declaration(NamedIndividual(:Spring))
Declaration(NamedIndividual(:Static_code_analysis))
Declaration(NamedIndividual(:Storage))
Declaration(NamedIndividual(:Stress_Attack))
Declaration(NamedIndividual(:TLS_protocol))
Declaration(NamedIndividual(:Technique))
Declaration(NamedIndividual(:Throughput))
Declaration(NamedIndividual(:Time_Complexity))
Declaration(NamedIndividual(:Time_Consuming))
Declaration(NamedIndividual(:Tool))
Declaration(NamedIndividual(:Traffic_measurement))
Declaration(NamedIndividual(:Unauthorized_Access))
Declaration(NamedIndividual(:Violate_Non-repudiation))
Declaration(NamedIndividual(:Web_app))
Declaration(NamedIndividual(<http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#5G>))
Declaration(NamedIndividual(<http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#R/W_permission_to_message_broker>))
Declaration(NamedIndividual(<http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Sacle-up/down_N-variant_micorservices>))
Declaration(NamedIndividual(<http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#White-list_HTTP/IP>))

############################
#   Object Properties
############################

# Object Property: :applicableAt (:applicableAt)

ObjectPropertyDomain(:applicableAt :SecurityMechanism)
ObjectPropertyRange(:applicableAt :ArchitecturalLayer)

# Object Property: :applicableTo (:applicableTo)

ObjectPropertyDomain(:applicableTo :SecurityMechanism)
ObjectPropertyRange(:applicableTo :TargetPlatform)

# Object Property: :hasSource (:hasSource)

ObjectPropertyDomain(:hasSource :SecurityThreat)
ObjectPropertyRange(:hasSource :ThreatSource)

# Object Property: :hasType (:hasType)

ObjectPropertyDomain(:hasType :SecurityMechanism)
ObjectPropertyRange(:hasType :SolutionType)

# Object Property: :treatedBy (:treatedBy)

InverseObjectProperties(:treatedBy :treats)
ObjectPropertyDomain(:treatedBy :SecurityThreat)
ObjectPropertyRange(:treatedBy :SecurityMechanism)

# Object Property: :treats (:treats)

ObjectPropertyDomain(:treats :SecurityMechanism)
ObjectPropertyRange(:treats :SecurityThreat)

# Object Property: :validatedThrough (:validatedThrough)

ObjectPropertyDomain(:validatedThrough :SecurityMechanism)
ObjectPropertyRange(:validatedThrough <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique>)


############################
#   Data Properties
############################

# Data Property: :abbriviation (:abbriviation)

SubDataPropertyOf(:abbriviation owl:topDataProperty)
DataPropertyRange(:abbriviation xsd:string)

# Data Property: :description (:description)

DataPropertyRange(:description xsd:string)



############################
#   Classes
############################

# Class: :Access_Control (:Access_Control)

SubClassOf(:Access_Control :SecurityMechanism)

# Class: :Adhoc_Metrics (:Adhoc_Metrics)

SubClassOf(:Adhoc_Metrics <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique>)

# Class: :ArchitecturalLayer (:ArchitecturalLayer)

SubClassOf(:ArchitecturalLayer :SecurityInMSA)

# Class: :Auditing (:Auditing)

SubClassOf(:Auditing :SecurityMechanism)

# Class: :Authentication (:Authentication)

SubClassOf(:Authentication :Access_Control)

# Class: :Authorization (:Authorization)

SubClassOf(:Authorization :Access_Control)

# Class: :Case_Study (:Case_Study)

SubClassOf(:Case_Study <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique>)

# Class: :Complexity_Measuring (:Complexity_Measuring)

SubClassOf(:Complexity_Measuring <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique>)

# Class: :Data_Attacks (:Data_Attacks)

SubClassOf(:Data_Attacks :SecurityThreat)

# Class: :Formal_Verification (:Formal_Verification)

SubClassOf(:Formal_Verification <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique>)

# Class: :Infrastructure_Attacks (:Infrastructure_Attacks)

SubClassOf(:Infrastructure_Attacks :SecurityThreat)

# Class: :Manual_Testing (:Manual_Testing)

SubClassOf(:Manual_Testing <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique>)

# Class: :Methodology (:Methodology)

SubClassOf(:Methodology <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique>)

# Class: :Mitigation (:Mitigation)

SubClassOf(:Mitigation :SecurityMechanism)

# Class: :Performance_analysis (:Performance_analysis)

SubClassOf(:Performance_analysis <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique>)

# Class: :Prevention (:Prevention)

SubClassOf(:Prevention :SecurityMechanism)

# Class: :Proof_Of_Concept (:Proof_Of_Concept)

SubClassOf(:Proof_Of_Concept <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique>)

# Class: :Qualitative_analysis (:Qualitative_analysis)

SubClassOf(:Qualitative_analysis <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique>)

# Class: :Quantitative_analysis (:Quantitative_analysis)

SubClassOf(:Quantitative_analysis <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique>)

# Class: :SecurityMechanism (:SecurityMechanism)

SubClassOf(:SecurityMechanism :SecurityInMSA)

# Class: :SecurityThreat (:SecurityThreat)

SubClassOf(:SecurityThreat :SecurityInMSA)

# Class: :Simulation (:Simulation)

SubClassOf(:Simulation <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique>)

# Class: :Software_Attacks (:Software_Attacks)

SubClassOf(:Software_Attacks :SecurityThreat)

# Class: :SolutionType (:SolutionType)

SubClassOf(:SolutionType :SecurityInMSA)

# Class: :TargetPlatform (:TargetPlatform)

SubClassOf(:TargetPlatform :SecurityInMSA)

# Class: :ThreatSource (:ThreatSource)

SubClassOf(:ThreatSource :SecurityInMSA)

# Class: :Tool_Based_Testing (:Tool_Based_Testing)

SubClassOf(:Tool_Based_Testing <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique>)

# Class: :User_Based_Attacks (:User_Based_Attacks)

SubClassOf(:User_Based_Attacks :SecurityThreat)

# Class: <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique> (<http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique>)

SubClassOf(<http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Security_V&V_Technique> :SecurityInMSA)


############################
#   Named Individuals
############################

# Individual: :Ability_to_logout (:Ability_to_logout)

ClassAssertion(:Qualitative_analysis :Ability_to_logout)

# Individual: :Adaptable_Intrusion_Response_System (:Adaptable_Intrusion_Response_System)

ClassAssertion(:Mitigation :Adaptable_Intrusion_Response_System)
ObjectPropertyAssertion(:applicableAt :Adaptable_Intrusion_Response_System :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Adaptable_Intrusion_Response_System :Independent)
ObjectPropertyAssertion(:hasType :Adaptable_Intrusion_Response_System :Algorithm)
ObjectPropertyAssertion(:treats :Adaptable_Intrusion_Response_System :Compromise_Containers)
ObjectPropertyAssertion(:treats :Adaptable_Intrusion_Response_System :Compromise_Hypervisor)
ObjectPropertyAssertion(:treats :Adaptable_Intrusion_Response_System :Compromise_Management_Interface)
ObjectPropertyAssertion(:treats :Adaptable_Intrusion_Response_System :Compromise_Network_Nodes)
ObjectPropertyAssertion(:treats :Adaptable_Intrusion_Response_System :Compromise_discovery_service)
ObjectPropertyAssertion(:treats :Adaptable_Intrusion_Response_System :Compromise_microservices)
ObjectPropertyAssertion(:treats :Adaptable_Intrusion_Response_System :Compromize_Virtual_Machines)
ObjectPropertyAssertion(:validatedThrough :Adaptable_Intrusion_Response_System :CPU_usage)
ObjectPropertyAssertion(:validatedThrough :Adaptable_Intrusion_Response_System :Space_Complexity)
ObjectPropertyAssertion(:validatedThrough :Adaptable_Intrusion_Response_System :Storage)
ObjectPropertyAssertion(:validatedThrough :Adaptable_Intrusion_Response_System :Time_Complexity)
DataPropertyAssertion(:description :Adaptable_Intrusion_Response_System "Choose most effective and least costly response to an attack rather than applying drastic measures in every situation.")

# Individual: :Algorithm (:Algorithm)

ClassAssertion(:SolutionType :Algorithm)

# Individual: :Application_Programming_Interface (:Application_Programming_Interface)

ClassAssertion(:ArchitecturalLayer :Application_Programming_Interface)

# Individual: :Attack_surface_analysis (:Attack_surface_analysis)

ClassAssertion(:Methodology :Attack_surface_analysis)
DataPropertyAssertion(:description :Attack_surface_analysis "Evaluate the improvement in the horizontal and vertical attack surfaces.")

# Individual: :Attribute-Based_Access_Control (:Attribute-Based_Access_Control)

ClassAssertion(:Authorization :Attribute-Based_Access_Control)
ObjectPropertyAssertion(:applicableAt :Attribute-Based_Access_Control :Application_Programming_Interface)
ObjectPropertyAssertion(:applicableAt :Attribute-Based_Access_Control :Communication)
ObjectPropertyAssertion(:applicableTo :Attribute-Based_Access_Control :IoT)
ObjectPropertyAssertion(:hasType :Attribute-Based_Access_Control :Technique)
ObjectPropertyAssertion(:treats :Attribute-Based_Access_Control :Unauthorized_Access)
DataPropertyAssertion(:abbriviation :Attribute-Based_Access_Control "ABAC")
DataPropertyAssertion(:description :Attribute-Based_Access_Control "Attribute-based access control (ABAC), also known as policy-based access control, defines an access control paradigm whereby access rights are granted to users through the use of policies which combine attributes together. The policies can use any type of attributes (user attributes, resource attributes, object, environment attributes etc.). This model supports Boolean logic, in which rules contain \"IF, THEN\" statements about who is making the request, the resource, and the action. For example: IF the requestor is a manager, THEN allow read/write access to sensitive data. [Wikipedia: https://en.wikipedia.org/wiki/Attribute-based_access_control]")

# Individual: :Blockchain_technology (:Blockchain_technology)

ClassAssertion(:Prevention :Blockchain_technology)
ObjectPropertyAssertion(:applicableAt :Blockchain_technology :Communication)
ObjectPropertyAssertion(:applicableTo :Blockchain_technology :Independent)
ObjectPropertyAssertion(:hasType :Blockchain_technology :Technique)
ObjectPropertyAssertion(:treats :Blockchain_technology :Sensitive_Data_Exposure)

# Individual: :Brute_Force_Attack (:Brute_Force_Attack)

ClassAssertion(:User_Based_Attacks :Brute_Force_Attack)
ObjectPropertyAssertion(:hasSource :Brute_Force_Attack :External)
ObjectPropertyAssertion(:hasSource :Brute_Force_Attack :Internal)
DataPropertyAssertion(:description :Brute_Force_Attack "A brute-force attack consists of an attacker submitting many passwords or passphrases with the hope of eventually guessing correctly. The attacker systematically checks all possible passwords and passphrases until the correct one is found. Alternatively, the attacker can attempt to guess the key which is typically created from the password using a key derivation function. [Wikipedia: https://en.wikipedia.org/wiki/Brute-force_attack]")

# Individual: :CPU_usage (:CPU_usage)

ClassAssertion(:Performance_analysis :CPU_usage)

# Individual: :Cause_Single_point_of_failure (:Cause_Single_point_of_failure)

ClassAssertion(:Qualitative_analysis :Cause_Single_point_of_failure)

# Individual: :Centralized_Access_Control_Manager (:Centralized_Access_Control_Manager)

AnnotationAssertion(rdfs:seeAlso :Centralized_Access_Control_Manager :Single_Sign-On)
ClassAssertion(:Authentication :Centralized_Access_Control_Manager)
ObjectPropertyAssertion(:applicableAt :Centralized_Access_Control_Manager :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Centralized_Access_Control_Manager :Independent)
ObjectPropertyAssertion(:hasType :Centralized_Access_Control_Manager :Framework)
ObjectPropertyAssertion(:treats :Centralized_Access_Control_Manager :Brute_Force_Attack)
ObjectPropertyAssertion(:treats :Centralized_Access_Control_Manager :Spoofing_Attack)
ObjectPropertyAssertion(:treats :Centralized_Access_Control_Manager :Unauthorized_Access)
DataPropertyAssertion(:description :Centralized_Access_Control_Manager "Centralized access control manager enables the user to access all applications, websites and other computing systems from a single profile, with the same credentials from any location. All information assets in control of the user are subject to unified identity management.")

# Individual: :Certificates (:Certificates)

ClassAssertion(:Authentication :Certificates)
ObjectPropertyAssertion(:applicableAt :Certificates :Communication)
ObjectPropertyAssertion(:applicableAt :Certificates :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Certificates :IoT)
ObjectPropertyAssertion(:hasType :Certificates :Technique)
ObjectPropertyAssertion(:treats :Certificates :Unauthorized_Access)
ObjectPropertyAssertion(:validatedThrough :Certificates :Traffic_measurement)
DataPropertyAssertion(:description :Certificates "A security certificate is a small data file used as an Internet security technique through which the identity, authenticity and reliability of a website or service is established. A security certificate is used as a means to provide the security level of a website or service to general visitors, Internet service providers (ISPs) and Web servers.")

# Individual: :Cloud (:Cloud)

ClassAssertion(:TargetPlatform :Cloud)

# Individual: :Code_Reuse_Attack (:Code_Reuse_Attack)

ClassAssertion(:Software_Attacks :Code_Reuse_Attack)
ObjectPropertyAssertion(:hasSource :Code_Reuse_Attack :External)
DataPropertyAssertion(:description :Code_Reuse_Attack "Code reuse attack consists of subverting the intended control-flow of a program to invoke an unintended execution path inside the original program code. This includes calling an external malicious code,")

# Individual: :Cold_Boot_Attack (:Cold_Boot_Attack)

ClassAssertion(:Infrastructure_Attacks :Cold_Boot_Attack)
ObjectPropertyAssertion(:hasSource :Cold_Boot_Attack :External)
DataPropertyAssertion(:description :Cold_Boot_Attack "A cold boot attack is a type of side channel attack in which an attacker with physical access to a computer performs a memory dump of a computer's random access memory by performing a hard reset of the target machine. Typically, cold boot attacks are used to retrieve encryption keys from a running operating system for malicious or criminal investigative reasons. The attack relies on the data remanence property of DRAM and SRAM to retrieve memory contents that remain readable in the seconds to minutes after power has been removed. [Wikipedia: https://en.wikipedia.org/wiki/Cold_boot_attack]")

# Individual: :Common_Vulnerabilities_and_Exposures (:Common_Vulnerabilities_and_Exposures)

ClassAssertion(:Adhoc_Metrics :Common_Vulnerabilities_and_Exposures)
DataPropertyAssertion(:abbriviation :Common_Vulnerabilities_and_Exposures "CVE")

# Individual: :Common_Vulnerability_Scoring_System (:Common_Vulnerability_Scoring_System)

ClassAssertion(:Adhoc_Metrics :Common_Vulnerability_Scoring_System)
DataPropertyAssertion(:abbriviation :Common_Vulnerability_Scoring_System "CVSS")

# Individual: :Communication (:Communication)

ClassAssertion(:ArchitecturalLayer :Communication)

# Individual: :Compiler_Extensions (:Compiler_Extensions)

ClassAssertion(:Tool_Based_Testing :Compiler_Extensions)

# Individual: :Complexity_of_cracking (:Complexity_of_cracking)

ClassAssertion(:Qualitative_analysis :Complexity_of_cracking)

# Individual: :Complexity_of_implementation (:Complexity_of_implementation)

ClassAssertion(:Qualitative_analysis :Complexity_of_implementation)

# Individual: :Composition (:Composition)

ClassAssertion(:ArchitecturalLayer :Composition)

# Individual: :Compromise_Containers (:Compromise_Containers)

AnnotationAssertion(rdfs:seeAlso :Compromise_Containers :Compromize_Virtual_Machines)
ClassAssertion(:Infrastructure_Attacks :Compromise_Containers)
ObjectPropertyAssertion(:hasSource :Compromise_Containers :Internal)
DataPropertyAssertion(:description :Compromise_Containers "Compromising containers is a situation where attackers can spread cmpromised containers in container-based platforms after compromising user accounts or presented as malicious insider. With a single compromised container, attackers may move laterally across the corporate network, perhaps taking over the network completely.")

# Individual: :Compromise_Hypervisor (:Compromise_Hypervisor)

ClassAssertion(:Infrastructure_Attacks :Compromise_Hypervisor)
ObjectPropertyAssertion(:hasSource :Compromise_Hypervisor :Internal)
DataPropertyAssertion(:description :Compromise_Hypervisor "Compromising hypervisors enable attackers to unfetter access to every VM and the data stored on them.")

# Individual: :Compromise_Management_Interface (:Compromise_Management_Interface)

ClassAssertion(:Infrastructure_Attacks :Compromise_Management_Interface)
ObjectPropertyAssertion(:hasSource :Compromise_Management_Interface :External)
DataPropertyAssertion(:description :Compromise_Management_Interface "Management Interface in MSA enables subscribing, loading and destroying micorservices. Managment Interfaces are available online. Thus Compromising such management interfaces enables external attackers to get access and manipulate subscribed microservices.")

# Individual: :Compromise_Network_Nodes (:Compromise_Network_Nodes)

ClassAssertion(:Infrastructure_Attacks :Compromise_Network_Nodes)
ObjectPropertyAssertion(:hasSource :Compromise_Network_Nodes :External)
DataPropertyAssertion(:description :Compromise_Network_Nodes "Node compromise attacks enables capturing a node and access data or software stored on the node and destroy connectivity. Compromised nodes can also be redeployed back into the network and used to launch further attacks.")

# Individual: :Compromise_discovery_service (:Compromise_discovery_service)

ClassAssertion(:Infrastructure_Attacks :Compromise_discovery_service)
ObjectPropertyAssertion(:hasSource :Compromise_discovery_service :Internal)
DataPropertyAssertion(:description :Compromise_discovery_service "A discovery service holds sensitive information about the location of all the microservices in MSA-based applications. It also registers new instances of  microservices. Thus, compromising a discovery service enables learning network location of all the microservices in MSA-based systems and allows registering malicious microservices into running applications.")

# Individual: :Compromise_microservices (:Compromise_microservices)

ClassAssertion(:Software_Attacks :Compromise_microservices)
ObjectPropertyAssertion(:hasSource :Compromise_microservices :Internal)
DataPropertyAssertion(:description :Compromise_microservices "Compromising an individual microservices may bring down the entire application (other micorservices) exploiting the trust model adopted by MSA.")

# Individual: :Compromize_Operating_Systems (:Compromize_Operating_Systems)

ClassAssertion(:Infrastructure_Attacks :Compromize_Operating_Systems)
ObjectPropertyAssertion(:hasSource :Compromize_Operating_Systems :External)
DataPropertyAssertion(:description :Compromize_Operating_Systems "A compromised operating system kernel can deceive other programs, the users, and the administrators of that computer system in difficult to detect ways.")

# Individual: :Compromize_Virtual_Machines (:Compromize_Virtual_Machines)

AnnotationAssertion(rdfs:seeAlso :Compromize_Virtual_Machines :Compromise_containers)
ClassAssertion(:Infrastructure_Attacks :Compromize_Virtual_Machines)
DataPropertyAssertion(:description :Compromize_Virtual_Machines "With asingle compromised VM, attackers may successfully get access to  other VMs on the same system and even the host.")

# Individual: :Container_based (:Container_based)

ClassAssertion(:TargetPlatform :Container_based)

# Individual: :Continuous_Monitoring (:Continuous_Monitoring)

ClassAssertion(:Auditing :Continuous_Monitoring)
ObjectPropertyAssertion(:applicableAt :Continuous_Monitoring :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Continuous_Monitoring :Independent)
ObjectPropertyAssertion(:hasType :Continuous_Monitoring :Framework)
ObjectPropertyAssertion(:treats :Continuous_Monitoring :Compromise_Containers)
ObjectPropertyAssertion(:treats :Continuous_Monitoring :Compromise_Hypervisor)
ObjectPropertyAssertion(:treats :Continuous_Monitoring :Compromise_Management_Interface)
ObjectPropertyAssertion(:treats :Continuous_Monitoring :Compromise_Network_Nodes)
ObjectPropertyAssertion(:treats :Continuous_Monitoring :Compromise_discovery_service)
ObjectPropertyAssertion(:treats :Continuous_Monitoring :Compromise_microservices)
ObjectPropertyAssertion(:treats :Continuous_Monitoring :Compromize_Operating_Systems)
ObjectPropertyAssertion(:treats :Continuous_Monitoring :Compromize_Virtual_Machines)
ObjectPropertyAssertion(:validatedThrough :Continuous_Monitoring :Throughput)
DataPropertyAssertion(:description :Continuous_Monitoring "Continuous monitoring allows getting alerts for any suspicious activity on the system. Monitoring also helps in collecting information about attacks signatures and system vulnerabilities. Such information is highly useful in improving system security and detecting new kinds of attacks.")

# Individual: :Cross-Site_Request_Forgery (:Cross-Site_Request_Forgery)

ClassAssertion(:User_Based_Attacks :Cross-Site_Request_Forgery)
ObjectPropertyAssertion(:hasSource :Cross-Site_Request_Forgery :External)
DataPropertyAssertion(:abbriviation :Cross-Site_Request_Forgery "CSRF")
DataPropertyAssertion(:description :Cross-Site_Request_Forgery "In a CSRF attack, the attacker's goal is to cause an innocent victim to unknowingly submit a maliciously crafted web request to a website that the victim has privileged access to. This web request can be crafted to include URL parameters, cookies and other data that appear normal to the web server processing the request. This may cause actions to be performed on the website that can include inadvertent client or server data leakage, change of session state, or manipulation of an end user's account. [Wikipedia: https://en.wikipedia.org/wiki/Cross-site_request_forgery]")

# Individual: :Dataset_validation (:Dataset_validation)

ClassAssertion(:Quantitative_analysis :Dataset_validation)

# Individual: :Decentralized (:Decentralized)

ClassAssertion(:Qualitative_analysis :Decentralized)

# Individual: :Deception_by_live_cloning_and_sandboxing (:Deception_by_live_cloning_and_sandboxing)

AnnotationAssertion(rdfs:seeAlso :Deception_by_live_cloning_and_sandboxing :Isolation_of_sucpecious_microservices)
ClassAssertion(:Mitigation :Deception_by_live_cloning_and_sandboxing)
ObjectPropertyAssertion(:applicableAt :Deception_by_live_cloning_and_sandboxing :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Deception_by_live_cloning_and_sandboxing :Container_based)
ObjectPropertyAssertion(:hasType :Deception_by_live_cloning_and_sandboxing :Technique)
ObjectPropertyAssertion(:treats :Deception_by_live_cloning_and_sandboxing :Compromise_microservices)
ObjectPropertyAssertion(:validatedThrough :Deception_by_live_cloning_and_sandboxing :Emulate_Attacks)
ObjectPropertyAssertion(:validatedThrough :Deception_by_live_cloning_and_sandboxing :Quality_of_Deception)
ObjectPropertyAssertion(:validatedThrough :Deception_by_live_cloning_and_sandboxing :Throughput)
ObjectPropertyAssertion(:validatedThrough :Deception_by_live_cloning_and_sandboxing :Time_Complexity)
ObjectPropertyAssertion(:validatedThrough :Deception_by_live_cloning_and_sandboxing :Time_Consuming)
DataPropertyAssertion(:description :Deception_by_live_cloning_and_sandboxing "Altering the attacker’s perception of the network by live clonning suspecious containers and their communicated containers into sandox network respecting the same network overloading and performance.")

# Individual: :Denial_of_Service (:Denial_of_Service)

ClassAssertion(:Software_Attacks :Denial_of_Service)
ObjectPropertyAssertion(:hasSource :Denial_of_Service :Internal)
DataPropertyAssertion(:abbriviation :Denial_of_Service "DoS")
DataPropertyAssertion(:description :Denial_of_Service "A cyber-attack in which the perpetrator seeks to make a machine or network resource unavailable to its intended users by temporarily or indefinitely disrupting services of a host connected to the Internet. [Wikipedia: https://en.wikipedia.org/wiki/Denial-of-service_attack]")

# Individual: :Deployment (:Deployment)

ClassAssertion(:ArchitecturalLayer :Deployment)

# Individual: :Disrupt_Sensitive_Operation (:Disrupt_Sensitive_Operation)

ClassAssertion(:Software_Attacks :Disrupt_Sensitive_Operation)
ObjectPropertyAssertion(:hasSource :Disrupt_Sensitive_Operation :Internal)
DataPropertyAssertion(:description :Disrupt_Sensitive_Operation "Attackers can tamper with governing tools or scripts to manipulate governance routines. This may allow them to grant admin access or bypass authentication mechanisms by flipping bits in CPU registers.")

# Individual: :Distribute_sessions (:Distribute_sessions)

ClassAssertion(:Authentication :Distribute_sessions)
ObjectPropertyAssertion(:applicableAt :Distribute_sessions :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Distribute_sessions :Independent)
ObjectPropertyAssertion(:hasType :Distribute_sessions :Technique)
ObjectPropertyAssertion(:treats :Distribute_sessions :Unauthorized_Access)
ObjectPropertyAssertion(:validatedThrough :Distribute_sessions :Simple_to_implement)
DataPropertyAssertion(:description :Distribute_sessions "By distrubution of sessions, user access requests for some services are redirected to an authentication server if there are no session_id in the request. Auth requires the user to provide credentials, generates session for the user and store it in session store, then returns session_id to user. User re-requests access for services with session_id. Services query session store with session_id to get user’s status and make an appropriate response.")

# Individual: :Diversification (:Diversification)

ClassAssertion(:Mitigation :Diversification)
ObjectPropertyAssertion(:applicableAt :Diversification :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Diversification :Independent)
ObjectPropertyAssertion(:hasType :Diversification :General_Protection_Measures)
ObjectPropertyAssertion(:treats :Diversification :Compromise_Containers)
ObjectPropertyAssertion(:treats :Diversification :Compromise_Network_Nodes)
ObjectPropertyAssertion(:treats :Diversification :Compromise_microservices)
ObjectPropertyAssertion(:treats :Diversification :Compromize_Virtual_Machines)
ObjectPropertyAssertion(:validatedThrough :Diversification :Attack_surface_analysis)
ObjectPropertyAssertion(:validatedThrough :Diversification :Common_Vulnerabilities_and_Exposures)
ObjectPropertyAssertion(:validatedThrough :Diversification :Common_Vulnerability_Scoring_System)
ObjectPropertyAssertion(:validatedThrough :Diversification :Diversification_Index)
ObjectPropertyAssertion(:validatedThrough :Diversification :OWASP_Risk_Rating_Methodology)
ObjectPropertyAssertion(:validatedThrough :Diversification :Security_risk_comparison)
DataPropertyAssertion(:description :Diversification "Diversification aims at frustrating attackers by randomizing attack surfaces such that attackers are blinded thereby reducing the motivation to attack and overall attackability. Diversification can be achieved in many ways including the use of different programming languages, compilers, OS/basic images.")

# Individual: :Diversification_Index (:Diversification_Index)

ClassAssertion(:Adhoc_Metrics :Diversification_Index)

# Individual: :Downgrade_Attack (:Downgrade_Attack)

ClassAssertion(:Infrastructure_Attacks :Downgrade_Attack)
ObjectPropertyAssertion(:hasSource :Downgrade_Attack :External)
DataPropertyAssertion(:description :Downgrade_Attack "Downgrade attack consists of downgrading the adopted security measures and protocols used in an executing system. This includes TLS version rollback and redirecting the user from the secure, HTTPS version of a website to an unencrypted HTTP version. [Wikipedia: https://en.wikipedia.org/wiki/Downgrade_attack]")

# Individual: :Dynamic_code_analysis (:Dynamic_code_analysis)

ClassAssertion(:Auditing :Dynamic_code_analysis)
ObjectPropertyAssertion(:applicableAt :Dynamic_code_analysis :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Dynamic_code_analysis :Container_based)
ObjectPropertyAssertion(:treats :Dynamic_code_analysis :Compromise_Containers)
ObjectPropertyAssertion(:treats :Dynamic_code_analysis :Compromise_microservices)
ObjectPropertyAssertion(:validatedThrough :Dynamic_code_analysis :Compiler_Extensions)

# Individual: :Easy_scalable (:Easy_scalable)

ClassAssertion(:Qualitative_analysis :Easy_scalable)

# Individual: :Eavesdropping (:Eavesdropping)

ClassAssertion(:Data_Attacks :Eavesdropping)
ObjectPropertyAssertion(:hasSource :Eavesdropping :External)
DataPropertyAssertion(:description :Eavesdropping "Network eavesdropping is a network layer attack that focuses on capturing small packets from the network transmitted by other computers and reading the data content in search of any type of information. [Wikipedia: https://en.wikipedia.org/wiki/Eavesdropping]")

# Individual: :Emulate_Attacks (:Emulate_Attacks)

ClassAssertion(:Manual_Testing :Emulate_Attacks)

# Individual: :Encryption (:Encryption)

ClassAssertion(:Prevention :Encryption)
ObjectPropertyAssertion(:applicableAt :Encryption :Communication)
ObjectPropertyAssertion(:applicableTo :Encryption :Independent)
ObjectPropertyAssertion(:hasType :Encryption :Technique)
ObjectPropertyAssertion(:treats :Encryption :Sensitive_Data_Exposure)
ObjectPropertyAssertion(:validatedThrough :Encryption :CPU_usage)
ObjectPropertyAssertion(:validatedThrough :Encryption :Throughput)

# Individual: :External (:External)

ClassAssertion(:ThreatSource :External)

# Individual: :Firewalls (:Firewalls)

ClassAssertion(:Authentication :Firewalls)
ClassAssertion(:Authorization :Firewalls)
ObjectPropertyAssertion(:applicableAt :Firewalls :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Firewalls :Independent)
ObjectPropertyAssertion(:hasType :Firewalls :Tool)
ObjectPropertyAssertion(:treats :Firewalls :Unauthorized_Access)
DataPropertyAssertion(:description :Firewalls "A firewall is a network security system that monitors and controls incoming and outgoing network traffic based on predetermined security rules. A firewall typically establishes a barrier between a trusted internal network and untrusted external network, such as the Internet. [Wikipedia: https://en.wikipedia.org/wiki/Firewall_(computing)]")

# Individual: :Framework (:Framework)

ClassAssertion(:SolutionType :Framework)

# Individual: :Gatling_Open_Source_Load_Testing (:Gatling_Open_Source_Load_Testing)

ClassAssertion(:Tool_Based_Testing :Gatling_Open_Source_Load_Testing)

# Individual: :General_Protection_Measures (:General_Protection_Measures)

ClassAssertion(:SolutionType :General_Protection_Measures)

# Individual: :HIP_exchange_protocol_through_SDN_Controller (:HIP_exchange_protocol_through_SDN_Controller)

ClassAssertion(:Authentication :HIP_exchange_protocol_through_SDN_Controller)
ObjectPropertyAssertion(:applicableAt :HIP_exchange_protocol_through_SDN_Controller :Deployment)
ObjectPropertyAssertion(:applicableTo :HIP_exchange_protocol_through_SDN_Controller :Cloud)
ObjectPropertyAssertion(:hasType :HIP_exchange_protocol_through_SDN_Controller :Framework)
ObjectPropertyAssertion(:treats :HIP_exchange_protocol_through_SDN_Controller :Compromise_Containers)
ObjectPropertyAssertion(:treats :HIP_exchange_protocol_through_SDN_Controller :Denial_of_Service)
ObjectPropertyAssertion(:treats :HIP_exchange_protocol_through_SDN_Controller :Man_in_The_Middle)
ObjectPropertyAssertion(:treats :HIP_exchange_protocol_through_SDN_Controller :Replay_Attack)
ObjectPropertyAssertion(:treats :HIP_exchange_protocol_through_SDN_Controller :Unauthorized_Access)
ObjectPropertyAssertion(:validatedThrough :HIP_exchange_protocol_through_SDN_Controller :Latency)
ObjectPropertyAssertion(:validatedThrough :HIP_exchange_protocol_through_SDN_Controller :Session_Sustainability)
DataPropertyAssertion(:description :HIP_exchange_protocol_through_SDN_Controller "SynAPTIC framework enables secure and persistent connectivity between mobile containers, especially in the hybrid cloud and in multi-tenant cloud networks. The solution is based on the standardized Host Identity Protocol (HIP) that tenants can deploy on top of existing cloud infrastructure independently of their cloud provider.")

# Individual: :HTTP_signatures (:HTTP_signatures)

ClassAssertion(:Authentication :HTTP_signatures)
ObjectPropertyAssertion(:applicableAt :HTTP_signatures :Application_Programming_Interface)
ObjectPropertyAssertion(:applicableTo :HTTP_signatures :Independent)
ObjectPropertyAssertion(:hasType :HTTP_signatures :Technique)
ObjectPropertyAssertion(:treats :HTTP_signatures :Unauthorized_Access)
DataPropertyAssertion(:description :HTTP_signatures "HTTP signatures provide a mechanism to digitally sign an HTTP message using either symmetric or asymmetric keys, such that it helps to both verify the identity of the sender and, verify that the message was not tampered during the transit.")

# Individual: :Hard-Infrastructure (:Hard-Infrastructure)

ClassAssertion(:ArchitecturalLayer :Hard-Infrastructure)

# Individual: :Hardware_Security_Module (:Hardware_Security_Module)

ClassAssertion(:Prevention :Hardware_Security_Module)
ObjectPropertyAssertion(:applicableAt :Hardware_Security_Module :Communication)
ObjectPropertyAssertion(:applicableAt :Hardware_Security_Module :Hard-Infrastructure)
ObjectPropertyAssertion(:applicableAt :Hardware_Security_Module :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Hardware_Security_Module :Independent)
ObjectPropertyAssertion(:hasType :Hardware_Security_Module :General_Protection_Measures)
ObjectPropertyAssertion(:treats :Hardware_Security_Module :Sensitive_Data_Exposure)
ObjectPropertyAssertion(:treats :Hardware_Security_Module :Unauthorized_Access)

# Individual: :Hardware_backdoors (:Hardware_backdoors)

ClassAssertion(:Infrastructure_Attacks :Hardware_backdoors)
ObjectPropertyAssertion(:hasSource :Hardware_backdoors :Internal)
DataPropertyAssertion(:description :Hardware_backdoors "Hardware backdoors are backdoors in hardware, such as code inside hardware or firmware of computer chips that can be used to bypass or disable the security fence of a system. [Wikipedia: https://en.wikipedia.org/wiki/Hardware_backdoor]")

# Individual: :Heartblead (:Heartblead)

ClassAssertion(:Data_Attacks :Heartblead)
ObjectPropertyAssertion(:hasSource :Heartblead :External)
DataPropertyAssertion(:description :Heartblead "The Heartbleed bug is a severe implementation flaw in the OpenSSL library. It enables remote attackers to steal data from the memory of a victim servers via crafted packets that trigger a buffer over-read when communicating using TLS protocol.")

# Individual: :IP_Suffling (:IP_Suffling)

ClassAssertion(:Mitigation :IP_Suffling)
ObjectPropertyAssertion(:applicableAt :IP_Suffling :Deployment)
ObjectPropertyAssertion(:applicableTo :IP_Suffling :Cloud)
ObjectPropertyAssertion(:applicableTo :IP_Suffling :Container_based)
ObjectPropertyAssertion(:applicableTo :IP_Suffling :Independent)
ObjectPropertyAssertion(:hasType :IP_Suffling :Technique)
ObjectPropertyAssertion(:treats :IP_Suffling :Sniffing_Attack)
ObjectPropertyAssertion(:validatedThrough :IP_Suffling :Throughput)
DataPropertyAssertion(:description :IP_Suffling "IP shuffling is the continious change of assigned IP addresess to microservice or container hosts.")

# Individual: :Independent (:Independent)

ClassAssertion(:TargetPlatform :Independent)

# Individual: :Injection (:Injection)

ClassAssertion(:Software_Attacks :Injection)
ObjectPropertyAssertion(:hasSource :Injection :External)
DataPropertyAssertion(:description :Injection "Suppling untrusted input to a program, which gets processed by an interpreter as part of a command or query which alters the course of execution of that program.")

# Individual: :IntelliJ_IDEA_Unit-Testing (:IntelliJ_IDEA_Unit-Testing)

ClassAssertion(:Tool_Based_Testing :IntelliJ_IDEA_Unit-Testing)

# Individual: :Internal (:Internal)

ClassAssertion(:ThreatSource :Internal)

# Individual: :Intrusion_Detection (:Intrusion_Detection)

AnnotationAssertion(rdfs:seeAlso :Intrusion_Detection :Continuous_Monitoring)
ClassAssertion(:Auditing :Intrusion_Detection)
ObjectPropertyAssertion(:applicableAt :Intrusion_Detection :Microservice)
ObjectPropertyAssertion(:applicableAt :Intrusion_Detection :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Intrusion_Detection :Independent)
ObjectPropertyAssertion(:hasType :Intrusion_Detection :Technique)
ObjectPropertyAssertion(:treats :Intrusion_Detection :Compromise_Containers)
ObjectPropertyAssertion(:treats :Intrusion_Detection :Compromise_Hypervisor)
ObjectPropertyAssertion(:treats :Intrusion_Detection :Compromise_Management_Interface)
ObjectPropertyAssertion(:treats :Intrusion_Detection :Compromise_Network_Nodes)
ObjectPropertyAssertion(:treats :Intrusion_Detection :Compromise_discovery_service)
ObjectPropertyAssertion(:treats :Intrusion_Detection :Compromise_microservices)
ObjectPropertyAssertion(:treats :Intrusion_Detection :Compromize_Operating_Systems)
ObjectPropertyAssertion(:treats :Intrusion_Detection :Compromize_Virtual_Machines)
ObjectPropertyAssertion(:treats :Intrusion_Detection :Port_Scan_Attack)
ObjectPropertyAssertion(:validatedThrough :Intrusion_Detection :Emulate_Attacks)
ObjectPropertyAssertion(:validatedThrough :Intrusion_Detection :Receiver_Operating_Characteristic_Curve)
DataPropertyAssertion(:abbriviation :Intrusion_Detection "IDS")
DataPropertyAssertion(:description :Intrusion_Detection "An intrusion detection monitors a network or systems for malicious activity or policy violations. Any intrusion activity or violation is typically reported either to an administrator or collected centrally using a security information and event management system.")

# Individual: :IoT (:IoT)

ClassAssertion(:TargetPlatform :IoT)

# Individual: :Isolation_of_sucpecious_microservices (:Isolation_of_sucpecious_microservices)

ClassAssertion(:Mitigation :Isolation_of_sucpecious_microservices)
ObjectPropertyAssertion(:applicableAt :Isolation_of_sucpecious_microservices :Hard-Infrastructure)
ObjectPropertyAssertion(:applicableAt :Isolation_of_sucpecious_microservices :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Isolation_of_sucpecious_microservices :Cloud)
ObjectPropertyAssertion(:hasType :Isolation_of_sucpecious_microservices :Technique)
ObjectPropertyAssertion(:treats :Isolation_of_sucpecious_microservices :Compromise_Containers)
ObjectPropertyAssertion(:treats :Isolation_of_sucpecious_microservices :Compromise_microservices)
ObjectPropertyAssertion(:validatedThrough :Isolation_of_sucpecious_microservices :Quality_of_Deception)
DataPropertyAssertion(:description :Isolation_of_sucpecious_microservices "Live confinement of suspicious microservices into a sandbox network that allows to monitor and analyze ongoing attacks under quarantine and that retains an image of the vulnerable and open production network. Sandboxing requires to be applied transparently and cannot be detected by attackers.")

# Individual: :J-PAKE_protocol (:J-PAKE_protocol)

ClassAssertion(:Authentication :J-PAKE_protocol)
ObjectPropertyAssertion(:applicableAt :J-PAKE_protocol :Application_Programming_Interface)
ObjectPropertyAssertion(:applicableAt :J-PAKE_protocol :Microservice)
ObjectPropertyAssertion(:applicableTo :J-PAKE_protocol :Jadex)
ObjectPropertyAssertion(:hasType :J-PAKE_protocol :Protocol)
ObjectPropertyAssertion(:treats :J-PAKE_protocol :Compromise_microservices)
ObjectPropertyAssertion(:treats :J-PAKE_protocol :Replay_Attack)
ObjectPropertyAssertion(:treats :J-PAKE_protocol :Unauthorized_Access)
DataPropertyAssertion(:description :J-PAKE_protocol "The Password Authenticated Key Exchange by Juggling (or J-PAKE) is a password-authenticated key agreement protocol. J-PAKE protocol allows two parties to establish private and authenticated communication solely based on their shared (low-entropy) password without requiring a Public Key Infrastructure. It provides mutual authentication to the key exchange. [Wikipedia: https://en.wikipedia.org/wiki/Password_Authenticated_Key_Exchange_by_Juggling]")

# Individual: :JSON_Web_Token (:JSON_Web_Token)

ClassAssertion(:Authentication :JSON_Web_Token)
ClassAssertion(:Authorization :JSON_Web_Token)
ObjectPropertyAssertion(:applicableAt :JSON_Web_Token :Application_Programming_Interface)
ObjectPropertyAssertion(:applicableTo :JSON_Web_Token :Independent)
ObjectPropertyAssertion(:hasType :JSON_Web_Token :Technique)
ObjectPropertyAssertion(:treats :JSON_Web_Token :Cross-Site_Request_Forgery)
ObjectPropertyAssertion(:treats :JSON_Web_Token :Unauthorized_Access)
ObjectPropertyAssertion(:validatedThrough :JSON_Web_Token :Ability_to_logout)
ObjectPropertyAssertion(:validatedThrough :JSON_Web_Token :Gatling_Open_Source_Load_Testing)
DataPropertyAssertion(:description :JSON_Web_Token "JSON Web Token is an internet standard for creating JSON-based access tokens that assert some number of claims. The tokens are signed either using a private secret or a public/private key. The tokens can be signed by one party's private key (usually the server's) so that party can subsequently verify the token is legitimate. If the other party, by some suitable and trustworthy means, is in possession of the corresponding public key, they too are able to verify the token's legitimacy. [Wikipedia: https://en.wikipedia.org/wiki/JSON_Web_Token].")

# Individual: :Jadex (:Jadex)

ClassAssertion(:TargetPlatform :Jadex)

# Individual: :Kubernetes (:Kubernetes)

ClassAssertion(:TargetPlatform :Kubernetes)

# Individual: :Latency (:Latency)

ClassAssertion(:Performance_analysis :Latency)

# Individual: :Least-privilege (:Least-privilege)

ClassAssertion(:Prevention :Least-privilege)
ObjectPropertyAssertion(:applicableAt :Least-privilege :Application_Programming_Interface)
ObjectPropertyAssertion(:applicableAt :Least-privilege :Microservice)
ObjectPropertyAssertion(:applicableAt :Least-privilege :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Least-privilege :Independent)
ObjectPropertyAssertion(:hasType :Least-privilege :General_Protection_Measures)
ObjectPropertyAssertion(:treats :Least-privilege :Unauthorized_Access)

# Individual: :Live_migration (:Live_migration)

ClassAssertion(:Mitigation :Live_migration)
ObjectPropertyAssertion(:applicableAt :Live_migration :Hard-Infrastructure)
ObjectPropertyAssertion(:applicableAt :Live_migration :Microservice)
ObjectPropertyAssertion(:applicableTo :Live_migration :Cloud)
ObjectPropertyAssertion(:applicableTo :Live_migration :Container_based)
ObjectPropertyAssertion(:applicableTo :Live_migration :Independent)
ObjectPropertyAssertion(:hasType :Live_migration :Technique)
ObjectPropertyAssertion(:treats :Live_migration :Compromise_Containers)
ObjectPropertyAssertion(:treats :Live_migration :Compromise_discovery_service)
ObjectPropertyAssertion(:treats :Live_migration :Compromise_microservices)
ObjectPropertyAssertion(:validatedThrough :Live_migration :Throughput)
DataPropertyAssertion(:description :Live_migration "Move a running micorservice or a virtual machine between different physical network nodes without disconnecting the client or the micorservice.")

# Individual: :Machine_Learning (:Machine_Learning)

ClassAssertion(:Auditing :Machine_Learning)
ObjectPropertyAssertion(:applicableAt :Machine_Learning :Communication)
ObjectPropertyAssertion(:applicableAt :Machine_Learning :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Machine_Learning :Cloud)
ObjectPropertyAssertion(:applicableTo :Machine_Learning :IoT)
ObjectPropertyAssertion(:applicableTo :Machine_Learning :Web_app)
ObjectPropertyAssertion(:hasType :Machine_Learning :Technique)
ObjectPropertyAssertion(:treats :Machine_Learning :Brute_Force_Attack)
ObjectPropertyAssertion(:treats :Machine_Learning :Compromise_microservices)
ObjectPropertyAssertion(:treats :Machine_Learning :Denial_of_Service)
ObjectPropertyAssertion(:treats :Machine_Learning :Misconfiguration)
ObjectPropertyAssertion(:treats :Machine_Learning :Stress_Attack)
ObjectPropertyAssertion(:treats :Machine_Learning :Unauthorized_Access)
ObjectPropertyAssertion(:validatedThrough :Machine_Learning :CPU_usage)
ObjectPropertyAssertion(:validatedThrough :Machine_Learning :Receiver_Operating_Characteristic_Curve)
ObjectPropertyAssertion(:validatedThrough :Machine_Learning :Storage)
DataPropertyAssertion(:description :Machine_Learning "By observing communication traffic, machine learning models can be trained to capture anomaly behaviors.")

# Individual: :Malicious_Images (:Malicious_Images)

ClassAssertion(:Infrastructure_Attacks :Malicious_Images)
ObjectPropertyAssertion(:hasSource :Malicious_Images :Internal)
DataPropertyAssertion(:description :Malicious_Images "Loading malicious images into containers make those containers susceptible to cryptojacking which give attackers root access to the entire container.")

# Individual: :Malicious_Insider (:Malicious_Insider)

ClassAssertion(:User_Based_Attacks :Malicious_Insider)
ObjectPropertyAssertion(:hasSource :Malicious_Insider :Internal)
DataPropertyAssertion(:also_known_as :Malicious_Insider "Turncloak")
DataPropertyAssertion(:description :Malicious_Insider "Malicious insider attacks are caused by someone who maliciously and intentionally abuses legitimate credentials, typically to steal information for financial or personal incentives. Malicious insiders have an advantage over other attackers because they are familiar with the security policies and procedures of an organization, as well as its vulnerabilities.")

# Individual: :Malicious_Provider (:Malicious_Provider)

ClassAssertion(:Infrastructure_Attacks :Malicious_Provider)
ObjectPropertyAssertion(:hasSource :Malicious_Provider :Internal)
DataPropertyAssertion(:description :Malicious_Provider "A malicious provider could violate users’ privacy, but it could also equivocate and show different users divergent views of the system’s state,
and introduce hardware or software backdoors.")

# Individual: :Man_in_The_Middle (:Man_in_The_Middle)

ClassAssertion(:Data_Attacks :Man_in_The_Middle)
SameIndividual(:Man_in_The_Middle :Padding_Oracle_On_Downgraded_Legacy_Encryption_Attack)
ObjectPropertyAssertion(:hasSource :Man_in_The_Middle :External)
DataPropertyAssertion(:abbriviation :Man_in_The_Middle "MiTM")
DataPropertyAssertion(:description :Man_in_The_Middle "A man-in-the-middle attack (MITM) is an attack where the attacker secretly relays and possibly alters the communications between two parties who believe that they are directly communicating with each other. [Wikipedia: https://en.wikipedia.org/wiki/Man-in-the-middle_attack]")

# Individual: :Microservice (:Microservice)

ClassAssertion(:ArchitecturalLayer :Microservice)

# Individual: :Misconfiguration (:Misconfiguration)

ClassAssertion(:Infrastructure_Attacks :Misconfiguration)
ObjectPropertyAssertion(:hasSource :Misconfiguration :External)
DataPropertyAssertion(:description :Misconfiguration "Security misconfiguration can happen at any level of an application stack, including the network services, platform, web server, application server, database, frameworks, custom code, and pre-installed virtual machines, containers, or storage. Such flaws frequently give attackers unauthorized access to some system data or functionality. Occasionally, such flaws result in a complete system compromise. [OWASP: https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A6-Security_Misconfiguration]")

# Individual: :No-shared_memory_access (:No-shared_memory_access)

ClassAssertion(:Prevention :No-shared_memory_access)
ObjectPropertyAssertion(:applicableAt :No-shared_memory_access :Hard-Infrastructure)
ObjectPropertyAssertion(:applicableAt :No-shared_memory_access :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :No-shared_memory_access :Independent)
ObjectPropertyAssertion(:hasType :No-shared_memory_access :General_Protection_Measures)
ObjectPropertyAssertion(:treats :No-shared_memory_access :Unauthorized_Access)

# Individual: :No_inherent_bottelneck (:No_inherent_bottelneck)

ClassAssertion(:Qualitative_analysis :No_inherent_bottelneck)

# Individual: :OAuth2 (:OAuth2)

ClassAssertion(:Authorization :OAuth2)
ObjectPropertyAssertion(:applicableAt :OAuth2 :Application_Programming_Interface)
ObjectPropertyAssertion(:applicableTo :OAuth2 :Independent)
ObjectPropertyAssertion(:hasType :OAuth2 :Technique)
ObjectPropertyAssertion(:treats :OAuth2 :Sniffing_Attack)
ObjectPropertyAssertion(:treats :OAuth2 :Unauthorized_Access)
ObjectPropertyAssertion(:validatedThrough :OAuth2 :Gatling_Open_Source_Load_Testing)
DataPropertyAssertion(:description :OAuth2 "OAuth2 allows users (resource owner) to grant third-party applications (client) accessing user data (resource server) without sharing credential (e.g. password).")

# Individual: :OWASP_Risk_Rating_Methodology (:OWASP_Risk_Rating_Methodology)

ClassAssertion(:Methodology :OWASP_Risk_Rating_Methodology)
DataPropertyAssertion(:abbriviation :OWASP_Risk_Rating_Methodology "ORRM")

# Individual: :OWASP_ZAP (:OWASP_ZAP)

ClassAssertion(:Tool_Based_Testing :OWASP_ZAP)

# Individual: :OpenAPI_Documents (:OpenAPI_Documents)

ClassAssertion(:Tool_Based_Testing :OpenAPI_Documents)

# Individual: :Open_ID (:Open_ID)

ClassAssertion(:Authentication :Open_ID)
ObjectPropertyAssertion(:applicableAt :Open_ID :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Open_ID :Independent)
ObjectPropertyAssertion(:hasType :Open_ID :Technique)
ObjectPropertyAssertion(:treats :Open_ID :Unauthorized_Access)
ObjectPropertyAssertion(:validatedThrough :Open_ID :Gatling_Open_Source_Load_Testing)
DataPropertyAssertion(:description :Open_ID "OpenID is an apen standard that allows users to have only one digital identify (username and password pair) for many applications or services.")

# Individual: :Osmotic (:Osmotic)

ClassAssertion(:TargetPlatform :Osmotic)

# Individual: :Padding_Oracle_On_Downgraded_Legacy_Encryption_Attack (:Padding_Oracle_On_Downgraded_Legacy_Encryption_Attack)

ClassAssertion(:Data_Attacks :Padding_Oracle_On_Downgraded_Legacy_Encryption_Attack)
ObjectPropertyAssertion(:hasSource :Padding_Oracle_On_Downgraded_Legacy_Encryption_Attack :External)
DataPropertyAssertion(:abbriviation :Padding_Oracle_On_Downgraded_Legacy_Encryption_Attack "POODLE")
DataPropertyAssertion(:description :Padding_Oracle_On_Downgraded_Legacy_Encryption_Attack "The POODLE attack is a man-in-the-middle exploit which takes advantage of Internet and security software clients' fallback to SSL 3.0. If attackers successfully exploit this vulnerability, on average, they only need to make 256 SSL 3.0 requests to reveal one byte of encrypted messages. [Wikipedia: https://en.wikipedia.org/wiki/POODLE]")

# Individual: :Port_Scan_Attack (:Port_Scan_Attack)

ClassAssertion(:Infrastructure_Attacks :Port_Scan_Attack)
ObjectPropertyAssertion(:hasSource :Port_Scan_Attack :Internal)
DataPropertyAssertion(:description :Port_Scan_Attack "A port scan attack conisists of sending client requests to a range of server port addresses on a host, with the goal of finding an active port and exploiting a known vulnerability of that service.")

# Individual: :Proper_design (:Proper_design)

ClassAssertion(:Prevention :Proper_design)
ObjectPropertyAssertion(:applicableAt :Proper_design :Application_Programming_Interface)
ObjectPropertyAssertion(:applicableAt :Proper_design :Composition)
ObjectPropertyAssertion(:applicableAt :Proper_design :Deployment)
ObjectPropertyAssertion(:applicableAt :Proper_design :Microservice)
ObjectPropertyAssertion(:applicableAt :Proper_design :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Proper_design :Independent)
ObjectPropertyAssertion(:hasType :Proper_design :General_Protection_Measures)
ObjectPropertyAssertion(:treats :Proper_design :Compromise_Containers)
ObjectPropertyAssertion(:treats :Proper_design :Compromise_microservices)
ObjectPropertyAssertion(:treats :Proper_design :Compromize_Virtual_Machines)

# Individual: :Protocol (:Protocol)

ClassAssertion(:SolutionType :Protocol)

# Individual: :Quality_of_Deception (:Quality_of_Deception)

ClassAssertion(:Adhoc_Metrics :Quality_of_Deception)

# Individual: :Receiver_Operating_Characteristic_Curve (:Receiver_Operating_Characteristic_Curve)

ClassAssertion(:Adhoc_Metrics :Receiver_Operating_Characteristic_Curve)
DataPropertyAssertion(:abbriviation :Receiver_Operating_Characteristic_Curve "ROC curve")

# Individual: :Replay_Attack (:Replay_Attack)

ClassAssertion(:Data_Attacks :Replay_Attack)
ObjectPropertyAssertion(:hasSource :Replay_Attack :External)
DataPropertyAssertion(:description :Replay_Attack "A replay attack is a form of network attack in which a valid data transmission is maliciously or fraudulently repeated or delayed. [Wikipedia: https://en.wikipedia.org/wiki/Replay_attack]")

# Individual: :Restart_micorservices (:Restart_micorservices)

ClassAssertion(:Mitigation :Restart_micorservices)
ObjectPropertyAssertion(:applicableAt :Restart_micorservices :Microservice)
ObjectPropertyAssertion(:applicableTo :Restart_micorservices :Independent)
ObjectPropertyAssertion(:hasType :Restart_micorservices :Technique)
ObjectPropertyAssertion(:treats :Restart_micorservices :Compromise_microservices)
DataPropertyAssertion(:description :Restart_micorservices "Destroy the current instance of the service and start a new one from the same configuration.")

# Individual: :Role-Based_Access_Control (:Role-Based_Access_Control)

ClassAssertion(:Authorization :Role-Based_Access_Control)
ObjectPropertyAssertion(:applicableAt :Role-Based_Access_Control :Application_Programming_Interface)
ObjectPropertyAssertion(:applicableAt :Role-Based_Access_Control :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Role-Based_Access_Control :Independent)
ObjectPropertyAssertion(:applicableTo :Role-Based_Access_Control <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#5G>)
ObjectPropertyAssertion(:hasType :Role-Based_Access_Control :Technique)
ObjectPropertyAssertion(:treats :Role-Based_Access_Control :Unauthorized_Access)
ObjectPropertyAssertion(:validatedThrough :Role-Based_Access_Control :Gatling_Open_Source_Load_Testing)
DataPropertyAssertion(:abbriviation :Role-Based_Access_Control "RBAC")
DataPropertyAssertion(:description :Role-Based_Access_Control "Role-based access control (RBAC) is a policy-neutral access-control mechanism defined around roles and privileges. The components of RBAC such as role-permissions, user-role and role-role relationships make it simple to perform user assignments. [Wikipedia: https://en.wikipedia.org/wiki/Role-based_access_control].")

# Individual: :Rollback_microservices (:Rollback_microservices)

ClassAssertion(:Mitigation :Rollback_microservices)
ObjectPropertyAssertion(:applicableAt :Rollback_microservices :Hard-Infrastructure)
ObjectPropertyAssertion(:applicableAt :Rollback_microservices :Microservice)
ObjectPropertyAssertion(:applicableAt :Rollback_microservices :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Rollback_microservices :Independent)
ObjectPropertyAssertion(:hasType :Rollback_microservices :Technique)
ObjectPropertyAssertion(:treats :Rollback_microservices :Compromise_microservices)
DataPropertyAssertion(:description :Rollback_microservices "Use older configuration of the service.")

# Individual: :SGX_Technology_with_enclaves (:SGX_Technology_with_enclaves)

ClassAssertion(:Prevention :SGX_Technology_with_enclaves)
ObjectPropertyAssertion(:applicableAt :SGX_Technology_with_enclaves :Hard-Infrastructure)
ObjectPropertyAssertion(:applicableTo :SGX_Technology_with_enclaves :Cloud)
ObjectPropertyAssertion(:hasType :SGX_Technology_with_enclaves :Technique)
ObjectPropertyAssertion(:treats :SGX_Technology_with_enclaves :Cold_Boot_Attack)
ObjectPropertyAssertion(:treats :SGX_Technology_with_enclaves :Compromise_Hypervisor)
ObjectPropertyAssertion(:treats :SGX_Technology_with_enclaves :Compromize_Operating_Systems)
ObjectPropertyAssertion(:treats :SGX_Technology_with_enclaves :Sensitive_Data_Exposure)
ObjectPropertyAssertion(:validatedThrough :SGX_Technology_with_enclaves :Throughput)
ObjectPropertyAssertion(:validatedThrough :SGX_Technology_with_enclaves :Time_Consuming)
DataPropertyAssertion(:description :SGX_Technology_with_enclaves "SGX is a CPU extension that allowq applications to keep their states in encrypted memory (enclaves), thereby preventing even privileged software such as the OS and the hypervisor from accessing the data.")

# Individual: :Sandbox_escape (:Sandbox_escape)

ClassAssertion(:Infrastructure_Attacks :Sandbox_escape)
ObjectPropertyAssertion(:hasSource :Sandbox_escape :Internal)
DataPropertyAssertion(:description :Sandbox_escape "Sandbox escape consists of doing something within the sandboxed microservice that forces it to crash in some way or achieve a function that would allow you to run arbitrary code and execute code outside of the sandbox.")

# Individual: :Scan_container_images (:Scan_container_images)

AnnotationAssertion(rdfs:seeAlso :Scan_container_images :Dynamic_code_analysis)
AnnotationAssertion(rdfs:seeAlso :Scan_container_images :Static_code_analysis)
ClassAssertion(:Auditing :Scan_container_images)
ObjectPropertyAssertion(:applicableAt :Scan_container_images :Deployment)
ObjectPropertyAssertion(:applicableAt :Scan_container_images :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Scan_container_images :Container_based)
ObjectPropertyAssertion(:hasType :Scan_container_images :Tool)
ObjectPropertyAssertion(:treats :Scan_container_images :Compromise_Containers)
ObjectPropertyAssertion(:treats :Scan_container_images :Compromise_Hypervisor)
ObjectPropertyAssertion(:treats :Scan_container_images :Compromize_Operating_Systems)
DataPropertyAssertion(:description :Scan_container_images "Container image scanning works by parsing the container image file, then checking to see whether there are any known vulnerabilities. This can be made either statically (during deployment) or dynamically (at runtime).")

# Individual: :Secure_language (:Secure_language)

ClassAssertion(:Prevention :Secure_language)
ObjectPropertyAssertion(:applicableAt :Secure_language :Application_Programming_Interface)
ObjectPropertyAssertion(:applicableAt :Secure_language :Microservice)
ObjectPropertyAssertion(:applicableTo :Secure_language :Independent)
ObjectPropertyAssertion(:hasType :Secure_language :General_Protection_Measures)
ObjectPropertyAssertion(:treats :Secure_language :Code_Reuse_Attack)
ObjectPropertyAssertion(:treats :Secure_language :Compromise_microservices)
ObjectPropertyAssertion(:treats :Secure_language :Injection)
DataPropertyAssertion(:description :Secure_language "Software applications are typically specified and implemented in certain programming languages, and in order to protect against attacks, flaws and bugs an application’s source code might be vulnerable to, there is a need for application-level security; security evaluating the applications behavior with respect to the programming language. This area is generally known as language-based security. [Wikipedia: https://en.wikipedia.org/wiki/Language-based_security]")

# Individual: :Security_risk_comparison (:Security_risk_comparison)

ClassAssertion(:Methodology :Security_risk_comparison)
DataPropertyAssertion(:description :Security_risk_comparison "Verify the efficiency of the security mechanism.")

# Individual: :Sensitive_Data_Exposure (:Sensitive_Data_Exposure)

ClassAssertion(:Data_Attacks :Sensitive_Data_Exposure)
ObjectPropertyAssertion(:hasSource :Sensitive_Data_Exposure :External)
ObjectPropertyAssertion(:hasSource :Sensitive_Data_Exposure :Internal)
DataPropertyAssertion(:description :Sensitive_Data_Exposure "Sensitive Data Exposure occurs when an application does not adequately protect sensitive information. The data can vary and anything from passwords, session tokens, credit card data to private health data and more can be exposed.")

# Individual: :Session_Hijacking (:Session_Hijacking)

ClassAssertion(:Infrastructure_Attacks :Session_Hijacking)
ObjectPropertyAssertion(:hasSource :Session_Hijacking :External)
DataPropertyAssertion(:description :Session_Hijacking "Session hijacking is a method of taking over a Web user session by surreptitiously obtaining the session ID and masquerading as the authorized user. Once the user's session ID has been accessed (through session prediction), the attacker can masquerade as that user and do anything the user is authorized to do on the network.")

# Individual: :Session_Sustainability (:Session_Sustainability)

ClassAssertion(:Quantitative_analysis :Session_Sustainability)

# Individual: :Short-lived_Tokens (:Short-lived_Tokens)

ClassAssertion(:Mitigation :Short-lived_Tokens)
ObjectPropertyAssertion(:applicableAt :Short-lived_Tokens :Communication)
ObjectPropertyAssertion(:applicableAt :Short-lived_Tokens :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Short-lived_Tokens :Independent)
ObjectPropertyAssertion(:hasType :Short-lived_Tokens :General_Protection_Measures)
ObjectPropertyAssertion(:treats :Short-lived_Tokens :Eavesdropping)
ObjectPropertyAssertion(:treats :Short-lived_Tokens :Man_in_The_Middle)
ObjectPropertyAssertion(:treats :Short-lived_Tokens :Sensitive_Data_Exposure)
ObjectPropertyAssertion(:treats :Short-lived_Tokens :Sniffing_Attack)
ObjectPropertyAssertion(:treats :Short-lived_Tokens :Unauthorized_Access)
DataPropertyAssertion(:description :Short-lived_Tokens "Use short-lived credentials to authenticate calls. Short-lived credentials have a limited lifetime, with durations of just a few hours or shorter.")

# Individual: :Shutdown_Suspecious_Microservices (:Shutdown_Suspecious_Microservices)

ClassAssertion(:Prevention :Shutdown_Suspecious_Microservices)
ObjectPropertyAssertion(:applicableAt :Shutdown_Suspecious_Microservices :Microservice)
ObjectPropertyAssertion(:applicableTo :Shutdown_Suspecious_Microservices :Independent)
ObjectPropertyAssertion(:treats :Shutdown_Suspecious_Microservices :Compromise_microservices)
DataPropertyAssertion(:description :Shutdown_Suspecious_Microservices "Entails physical exclusion of the faulty service: stop the service permanently.")

# Individual: :Simple_to_implement (:Simple_to_implement)

ClassAssertion(:Qualitative_analysis :Simple_to_implement)

# Individual: :Single_Sign-On (:Single_Sign-On)

ClassAssertion(:Authentication :Single_Sign-On)
ObjectPropertyAssertion(:applicableAt :Single_Sign-On :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :Single_Sign-On :Independent)
ObjectPropertyAssertion(:hasType :Single_Sign-On :Technique)
ObjectPropertyAssertion(:treats :Single_Sign-On :Unauthorized_Access)
ObjectPropertyAssertion(:validatedThrough :Single_Sign-On :Cause_Single_point_of_failure)
DataPropertyAssertion(:abbriviation :Single_Sign-On "SSO")
DataPropertyAssertion(:description :Single_Sign-On "SSO method allows a user to be authenticated only once during logging in to a particular system and then accessing all their resources and services withour further authentication.")

# Individual: :Smart-Contracts (:Smart-Contracts)

ClassAssertion(:Prevention :Smart-Contracts)
ObjectPropertyAssertion(:applicableAt :Smart-Contracts :Communication)
ObjectPropertyAssertion(:applicableTo :Smart-Contracts :Independent)
ObjectPropertyAssertion(:hasType :Smart-Contracts :Technique)
ObjectPropertyAssertion(:treats :Smart-Contracts :Unauthorized_Access)
DataPropertyAssertion(:description :Smart-Contracts "A smart contract is a computer protocol intended to digitally facilitate, verify, or enforce the negotiation or performance of a contract. Smart contracts allow the performance of credible transactions without third parties. These transactions are trackable and irreversible. [Wikipedia: https://en.wikipedia.org/wiki/Smart_contract]")

# Individual: :Sniffing_Attack (:Sniffing_Attack)

ClassAssertion(:Data_Attacks :Sniffing_Attack)
ObjectPropertyAssertion(:hasSource :Sniffing_Attack :External)
DataPropertyAssertion(:description :Sniffing_Attack "Sniffing attack consists of intercepting data by capturing the network traffic using specifc applications (a.k.a. sniffer) that aim to capture unencrypted network packets. [Wikipedia: https://en.wikipedia.org/wiki/Sniffing_attack]")

# Individual: :Soft-Infrastructure (:Soft-Infrastructure)

ClassAssertion(:ArchitecturalLayer :Soft-Infrastructure)

# Individual: :Space_Complexity (:Space_Complexity)

ClassAssertion(:Complexity_Measuring :Space_Complexity)

# Individual: :Spoofing_Attack (:Spoofing_Attack)

ClassAssertion(:User_Based_Attacks :Spoofing_Attack)
ObjectPropertyAssertion(:hasSource :Spoofing_Attack :External)
DataPropertyAssertion(:description :Spoofing_Attack "A Spoofing attack is a situation in which a person or program successfully identifies as another by falsifying data, to gain an illegitimate advantage. [Wikipedia: https://en.wikipedia.org/wiki/Spoofing_attack]")

# Individual: :Spring (:Spring)

ClassAssertion(:TargetPlatform :Spring)

# Individual: :Static_code_analysis (:Static_code_analysis)

ClassAssertion(:Auditing :Static_code_analysis)
ObjectPropertyAssertion(:applicableAt :Static_code_analysis :Deployment)
ObjectPropertyAssertion(:applicableTo :Static_code_analysis :Container_based)
ObjectPropertyAssertion(:hasType :Static_code_analysis :General_Protection_Measures)
ObjectPropertyAssertion(:treats :Static_code_analysis :Compromise_Containers)
ObjectPropertyAssertion(:treats :Static_code_analysis :Compromise_microservices)
ObjectPropertyAssertion(:validatedThrough :Static_code_analysis :Compiler_Extensions)

# Individual: :Storage (:Storage)

ClassAssertion(:Performance_analysis :Storage)

# Individual: :Stress_Attack (:Stress_Attack)

ClassAssertion(:Infrastructure_Attacks :Stress_Attack)
ObjectPropertyAssertion(:hasSource :Stress_Attack :Internal)
DataPropertyAssertion(:description :Stress_Attack "Stress attack consits of stressing the infrastructure by increasing its CPU utilization and deceive the autoscaling system to provide more resources.")

# Individual: :TLS_protocol (:TLS_protocol)

ClassAssertion(:Prevention :TLS_protocol)
ObjectPropertyAssertion(:applicableAt :TLS_protocol :Communication)
ObjectPropertyAssertion(:applicableAt :TLS_protocol :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo :TLS_protocol :Independent)
ObjectPropertyAssertion(:hasType :TLS_protocol :Protocol)
ObjectPropertyAssertion(:treats :TLS_protocol :Man_in_The_Middle)
ObjectPropertyAssertion(:treats :TLS_protocol :Sensitive_Data_Exposure)
ObjectPropertyAssertion(:treats :TLS_protocol :Unauthorized_Access)
DataPropertyAssertion(:description :TLS_protocol "The TLS protocol aims primarily to provide privacy and data integrity between two or more communicating computer applications. [Wikipedia: https://en.wikipedia.org/wiki/Transport_Layer_Security]")

# Individual: :Technique (:Technique)

ClassAssertion(:SolutionType :Technique)
DataPropertyAssertion(:also_known_as :Technique "Technology")

# Individual: :Throughput (:Throughput)

ClassAssertion(:Performance_analysis :Throughput)

# Individual: :Time_Complexity (:Time_Complexity)

ClassAssertion(:Complexity_Measuring :Time_Complexity)

# Individual: :Time_Consuming (:Time_Consuming)

ClassAssertion(:Performance_analysis :Time_Consuming)

# Individual: :Tool (:Tool)

ClassAssertion(:SolutionType :Tool)

# Individual: :Traffic_measurement (:Traffic_measurement)

ClassAssertion(:Performance_analysis :Traffic_measurement)

# Individual: :Unauthorized_Access (:Unauthorized_Access)

ClassAssertion(:User_Based_Attacks :Unauthorized_Access)
ObjectPropertyAssertion(:hasSource :Unauthorized_Access :External)
ObjectPropertyAssertion(:hasSource :Unauthorized_Access :Internal)
DataPropertyAssertion(:description :Unauthorized_Access "Unauthorized access attacks include any attempt by a person who knowingly tries to access a system or a service to which that person does not have specific access permissions.")

# Individual: :Violate_Non-repudiation (:Violate_Non-repudiation)

ClassAssertion(:User_Based_Attacks :Violate_Non-repudiation)
ObjectPropertyAssertion(:hasSource :Violate_Non-repudiation :External)
DataPropertyAssertion(:description :Violate_Non-repudiation "Violate non-repudiation attacks typically either directly target related security requirements (i.e., integrity, authentication, and availability) or directly target weak points in the non-repudiation schemes such as deciphering a weak cryptographic key used in digital signature.")

# Individual: :Web_app (:Web_app)

ClassAssertion(:TargetPlatform :Web_app)

# Individual: <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#5G> (<http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#5G>)

ClassAssertion(:TargetPlatform <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#5G>)

# Individual: <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#R/W_permission_to_message_broker> (<http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#R/W_permission_to_message_broker>)

ClassAssertion(:Authorization <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#R/W_permission_to_message_broker>)
ObjectPropertyAssertion(:applicableAt <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#R/W_permission_to_message_broker> :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#R/W_permission_to_message_broker> :Independent)
ObjectPropertyAssertion(:hasType <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#R/W_permission_to_message_broker> :General_Protection_Measures)
DataPropertyAssertion(:description <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#R/W_permission_to_message_broker> "A Message Broker is an intermediary module that translates a message from the formal messaging protocol of the sender to the formal messaging protocol of the receiver. Message brokers are elements in telecommunication or computer networks where software applications communicate by exchanging formally-defined messages. Permissions should be granted to authentic users for administrating Message Brokers to protect against data exposures.")

# Individual: <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Sacle-up/down_N-variant_micorservices> (<http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Sacle-up/down_N-variant_micorservices>)

ClassAssertion(:Mitigation <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Sacle-up/down_N-variant_micorservices>)
ObjectPropertyAssertion(:applicableAt <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Sacle-up/down_N-variant_micorservices> :Hard-Infrastructure)
ObjectPropertyAssertion(:applicableAt <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Sacle-up/down_N-variant_micorservices> :Microservice)
ObjectPropertyAssertion(:applicableAt <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Sacle-up/down_N-variant_micorservices> :Soft-Infrastructure)
ObjectPropertyAssertion(:applicableTo <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Sacle-up/down_N-variant_micorservices> :Independent)
ObjectPropertyAssertion(:hasType <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Sacle-up/down_N-variant_micorservices> :Technique)
ObjectPropertyAssertion(:treats <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Sacle-up/down_N-variant_micorservices> :Compromise_microservices)
DataPropertyAssertion(:description <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#Sacle-up/down_N-variant_micorservices> "Use existing diversification techniques to spawn additional microservices, which feed their result to a governor node that compare the results for consistency.")

# Individual: <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#White-list_HTTP/IP> (<http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#White-list_HTTP/IP>)

ClassAssertion(:Authentication <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#White-list_HTTP/IP>)
ObjectPropertyAssertion(:applicableAt <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#White-list_HTTP/IP> :Application_Programming_Interface)
ObjectPropertyAssertion(:applicableTo <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#White-list_HTTP/IP> :Independent)
ObjectPropertyAssertion(:hasType <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#White-list_HTTP/IP> :Technique)
ObjectPropertyAssertion(:treats <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#White-list_HTTP/IP> :Unauthorized_Access)
DataPropertyAssertion(:description <http://www.semanticweb.org/hannousse/ontologies/2020/2/SecurityInMSA#White-list_HTTP/IP> "The access is restricted by setting up a whitelist of IP addresses.")


)